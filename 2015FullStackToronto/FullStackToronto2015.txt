| \*Powerful and Elegant Scala One-Liners
/

| Marconi Lanna

| Originate

| http://scalaupnorth.com/

---

| \*Why Scala?

--

Scala is an expressive, elegant, and powerful language with clean and
flexible syntax, concise yet not terse, that allows us to write more
with less code.

--

So we can spend more time compiling it.

--

It runs on the JVM and is fully interoperable with Java: you can call
Java code from Scala and Scala code from Java.
--

A single line of Scala can leverage an impressive amount of JVM power.

---

| \* Disclaimer


This talk is not a Scala tutorial.

--

That said, a few very brief introductory words about the language.

---

Scala is a functional, object-oriented, compiled, safe, static, strongly
typed programming language that favors immutability and provides modern
features like type inference, first-class functions, closures & lambdas,
macros, traits, pattern matching, option types, extension methods,
properties, uniform access, string interpolation, named and default
parameters, symbolic method names ("operator overloading"), tuples,
support for internal Domain Specific Languages (DSLs), and facilities
for reactive, concurrent, and parallel computation, including futures,
promises, parallel collections, and actors.

---

Scala is a pure object-oriented language: all values are objects.

--

There are no primitives, no "static", no operators.

--

Every operation in Scala is a method call on an object,
i.e., an instance of a class.

---

Scala is a functional language in the sense that functions are
first-class values: they can be passed to other functions, returned as
values, assigned to variables, stored in collections, etc.

--

If all values are objects and all functions are first-class values, it
turns out then that functions themselves are objects.

--

Scala is not a pure functional language in the sense that mutability is
forbidden, even though immutability is encouraged by the language.

---

```
var s: String = "a"
var i: Int = 1
```
--

```
var s = "a"
var i = 1
```
--

```
s = "b"
```
--

```
i += 2
```
--

```
s = 0
i = 3.14
```

---

```
val s = "a"
val i = 1
```

--

```
s = "b"
i = i + 2
```

---

Let's see now some of the most elegant and powerful Scala one-liners.

--

Using only language features and the standard library.

--

All examples tested with Scala 2.11.7 and Java 8u66.

---

| \rWarning

--

This is not code golf.

--

This is not about writing the shortest code possible.

--

Cryptic one-liners do not impress anyone.

--

Code responsibly, write for readability.

---

| The power of one-liners

--

All other things being equal, a shorter method is easier to read,
easier to understand, and easier to troubleshoot.

--

Refactor long methods into smaller methods if you can.

--

Always try to write code at the highest level of abstraction:
closer to humans, away from bare metal machines.

--

Tell the computer what to do, not how to do it.

---

| The ultimate Scala one-liner:

--

```
case class Person(name: String, age: Int)
```

--

Case classes, even simpler ones with just a few parameters, can give you
what would take dozens if not hundreds of lines of Java to write by hand

---

| Everything a case class gives you

--

1. \*Getters\s: case classes are immutable by default, no setters.
--

2. \*Setters\s: if you really want, use \*var\s.
--

3. Sane \*java.lang.Object\s methods: \*toString\s, \*equals\s, \*hashCode\s.
--

4. The \*copy\s method, an immutable alternative to setters.
--

5. Serialization and deserialization: extends \*Serializable\s, \*readResolve\s
--

6. And more: \*canEqual\s, \*productArity\s, \*productElement\s, \*productIterator\s

---

| Companion object:
--

1. \*apply\s factory method
--

2. \*unapply\s extractor method for pattern matching
--

3. \*curried\s and \*tupled\s methods

---

| Let's see some examples

```
case class Person(name: String, age: Int)
```
--

```
val jim = Person("Jim", 24)
```
--

```
jim.name
```
--

```
jim.age > 18
```

---

```
jim.toString
```
--

```
jim.hashCode
```
--

```
jim == Person("J" + "im", 14 + 10)
```

---

```
jim.age = jim.age + 1
```
--

```
jim.copy(age = jim.age + 1)
```

---

```
val tuple = ("Jim", 25)
```
--

```
Person.tupled(tuple)
```
--

```
val a = Person.curried
val b = a("Jim")
val c = b(25)
```
--

```
Person.curried("Jim")(25)
```

---

Pattern matching
--

Not to be confused with regular expressions.
--

```
sealed trait Gender
case object Male extends Gender
case object Female extends Gender

case class Date(day: Int, month: String, year: Int)

case class Person(name: String, gender: Gender, birthday: Date)

val jim = Person("Jim", Male, Date(14, "November", 1990))
val jane = Person("Jane", Female, Date(23, "November", 1995))
```

---

```
def salute(person: Person) = person match {
  case Person(_, Male, _) => "Hello, old chap!"
  case Person(_, Female, _) => "Greetings, my dear lady..."
}

val a = salute(jim)
val b = salute(jane)
```

---

```
def birthday(person: Person) = person match {
  case Person(_, _, Date(14, "November", _)) =>
    "Today is your birthday!"

  case Person(_, _, Date(_, "November", _)) =>
    s"Your birthday is this month."
}

val a = birthday(jim)
val b = birthday(jane)
```

---

```
def birthday(person: Person) = person match {
  case Person(name, _, Date(14, "November", _)) =>
    s"Today is $name's birthday!"

  case Person(name, _, Date(day, "November", _)) =>
    s"$name birthday is the ${day}th of this month."
}

val a = birthday(jim)
val b = birthday(jane)
```

---

Extractors

```
val Date(_, month, year) = jim.birthday
```
--

```
val Person(_, _, Date(_, month, year)) = jim
```

---

| Extension methods on Java types

---

| Numeric types

--

```
-1.abs
```
--

```
val max = 2 max 3
val min = 2 min 3
```
--

```
val a = -5.signum
val b = 0.signum
val c = 7.signum
```
--

```
val a = 1 to 10
val b = 1 until 10
val c = 1 to 10 by 2
```

---

| Float & Double

--

```
val a = 2.5.ceil
val b = 2.5.floor
val c = 2.4.round
val d = 2.6.toInt
```
--

```
val a = math.Pi.toDegrees
val b = 180.toRadians
val c = 180.0.toRadians
```
--

```
val a = 1.0.isValidInt
val b = 1.1.isValidInt
val c = 9999999999.0.isValidInt
val d = 9999999999.0.isWhole
val e = 2e256.isWhole
```

---

| Char

--

```
val a = 'a'.isDigit
val b = 'a'.isLetter
val c ='#'.isLetterOrDigit
```
--

```
val a = 'a'.isLower
val b = 'A'.isUpper
```
--

```
val a = 'A'.toLower
val b = 'a'.toUpper
```
--

```
val a = ' '.isWhitespace
val b = '\t'.isWhitespace
val c = '\n'.isWhitespace
val d = '*'.isWhitespace
```
--

Ranges:

```
val a = 'a' to 'z'
val b = 'a' to 'z' by 4
```

---

| String

--

```
">-<" * 15
```
--

```
"hello world".capitalize
```
--

```
"hello" compareToIgnoreCase "HELLO"
```
--

Multi-line strings:

```
"""hello world
hallo welt
bonjour le monde
hola mundo
ciao mondo
""".lines.toList
```
---

In Scala, \*String\s is a collection of \*Char\s.

Most Scala collection methods are supported:

```
val a = "abc" map (_.toUpper)
val b = "abc" forall (_.isLower)
val c = "abc" exists (_.isDigit)
```

---

| Array

--

```
val a = Array(1, 2, 3) // this is Java int[]
```
--

Arrays, too, support most Scala collection methods.
--

```
val b = a map (i => i * 2)
val c = a.sum
```
--

Extractors & pattern matching
--

```
val t = "key:value" split ':'
```
--

```
val key = t(0)
val value = t(1)
```
--

```
val Array(key, value) = "key:value" split ':'
```

---

| Collections
--

Most Java collections can be decorated with Scala interfaces:
--

\*java.lang.Iterable
\*java.util.Collection
\*java.util.Dictionary
\*java.util.Enumeration
\*java.util.Iterator
\*java.util.List
\*java.util.Map
\*java.util.Set
\*java.util.concurrent.ConcurrentMap
--

```
import scala.collection.JavaConverters._

// System.getenv returns java.util.Map[String,String]
System.getenv.asScala filterKeys (_ contains "JAVA") mkString "\n"
```

---

| Idioms common to most collection types

--

```
// Pascal's triangle 6th row
val pascal = Seq(1, 6, 15, 20, 15, 6, 1)
```
--

```
pascal map (n => n * 2)
```
--

```
pascal map (_ * 2)
```
--

```
val a = pascal map (2 *)
val b = pascal map 2.*
```
---

To sum all elements:

```
pascal reduce (_ + _)
```
--

```
pascal.sum
```
--

```
pascal.product
```

---

```
def isEven(i: Int) = i % 2 == 0
```
--

```
pascal exists isEven
```
--

```
pascal forall isEven
```
--

```
pascal count isEven
```
--

```
pascal find isEven
```

---

| Filtering and grouping

--

```
val even = pascal filter isEven
val odd = pascal filterNot isEven
```
--

```
val (even, odd) = pascal partition isEven
```
--

```
pascal groupBy (_ % 3) mkString "\n"
```
--

```
val a = pascal takeWhile (_ < 20)
val b = pascal dropWhile (_ < 20)
```
--

```
pascal span (_ < 20)
```
--

```
pascal prefixLength (_ < 20)
```

---

```
pascal contains 20
```
--

```
val a = pascal indexOf 15
val b = pascal lastIndexOf 15
```
--

```
val a = pascal indexWhere isEven
val b = pascal lastIndexWhere isEven
```
--

```
val a = pascal startsWith Seq(1, 6, 15)
val b = pascal endsWith Seq(6, 1)
```
--

```
val a = pascal containsSlice Seq(20, 15)
val b = pascal indexOfSlice Seq(20, 15)
```

---

```
val max = pascal.max
val min = pascal.min
```
--

```
case class Person(name: String, age: Int)

val people = Seq(
  Person("Roger", 72),
  Person("Nick", 71),
  Person("Richard", 65),
  Person("Syd", 60),
  Person("David", 69))

people maxBy (_.age)
```

---

```
pascal.sorted
```
--

```
people sortBy (_.age)
```
--

```
pascal sortWith (_ > _)
```

---

```
Seq(1, 2, 3).reverse
```
--

```
Seq(1, 2, 3) reverseMap (2 *)
```

---

```
pascal.grouped(3).toList
```
--

```
pascal.sliding(3).toList
```

---

```
pascal mkString ", "
```
--

```
pascal.mkString("[", ":", "]")
```

---

```
pascal intersect Seq(3, 14, 15, 92, 6, 5)
```
--

```
pascal diff Seq(2, 3, 6)
```
--

```
Set(1, 2, 3) union Set(4, 3, 1, 5)
```
--

```
Set(5, 2) subsetOf Set(1, 2, 3, 4, 5)
```
--

```
Set(1, 2, 3).subsets mkString "\n"
```
--

```
Set(1, 2, 3, 4).subsets(2) mkString "\n"
```

---

```
pascal.combinations(2) mkString "\n"
```
--

```
Seq(1, 2, 3).permutations mkString "\n"
```
--

```
pascal.distinct
```

---

```
val a = Seq(1, 2, 3)
val b = Seq(4, 7, 5)

(a corresponds b)(_ < _)
```

--

```
Seq(Seq(1, 2, 3), Seq(4, 5, 6)).transpose mkString "\n"
```

--

```
val a = pascal lift 0
val b = pascal lift 2
val c = pascal lift 10
```

---

| Parallel Collections

--

Behaves exactly like sequential collections, except operations
are transparently performed in parallel using all CPU cores.
--

```
val par = pascal.par

val a = par.sum
val b = par map (2 *)
```
--

```
pascal.par foreach println
```

---

| Maps

--

```
val languages = Seq("Scala", "Java", "Swift").zipWithIndex.toMap
```
--

```
val a = languages.getOrElse("Swift", -1)
val b = languages.getOrElse("Haskell", -1)
```
--

```
languages filterKeys (_ startsWith "S")
```
--

```
languages mapValues (10 +)
```

---

| Poor man's cache

```
import scala.collection.mutable

val cache = mutable.Map[String, String]()

val a = cache.getOrElseUpdate("A", "ant")
val b = cache.getOrElseUpdate("B", "bee")
val c = cache.getOrElseUpdate("C", "cat")
val d = cache.getOrElseUpdate("B", "bug")
val e = cache("B")
```

---

| Putting it all together

---

Find the first three consecutive elements whose sum is greater than 40:

```
pascal.sliding(3) find (_.sum > 40)
```

---

```
val pangram = "The quick brown fox jumps over the lazy dog"
```

--
/

Does it really have all letters?

```
'a' to 'z' forall (pangram.contains(_))
```

--
/

I won’t believe it until I see it myself:

```
pangram.distinct.sorted
```

---

| How many times each letter appears?

--

Grouping:

```
pangram groupBy (_.toLower)
```

--
/

Computing frequency:

```
pangram groupBy (_.toLower) mapValues (_.size)
```

--
/

Removing white space (and let's save what we've done so far):

```
val m = pangram filter (_.isLetter) groupBy (_.toLower) mapValues (_.size)
```

---

Sorting by frequency:

```
m.toSeq sortBy (_._2)
```

--

/

Most frequent first:

```
m.toSeq sortWith (_._2 > _._2)
```

---

Only the letters that appear more than once:

```
m.filter(_._2 > 1).toSeq sortWith (_._2 > _._2) mkString "\n"
```

--

/

All worlds with the letter 'o'

```
(pangram split " ") filter (_ contains 'o')
```

---

All strings that contain at least one of a set of keywords

```
val a = Seq("Swift is a lot like Scala", "Java 9 delayed",
  "Scala takes over the world")

a filter { s =>
  Set("Scala", "Swift") exists s.contains
}
```

---

| Plotting a horizontal chart

--

```
pascal map ("#" * _) mkString "\n"
```

--
/

With value labels:

```
pascal map (i => f"$i%3d: " + "#" * i) foreach println
```

---

| Plotting a vertical chart

--

```
for (i <- pascal.max to pascal.min by -1)
  println(f"$i%3d: " + pascal.map(p => if (p==i) "*" else " ").mkString)
```

--
/

A bar chart. Can you spot the difference?

```
for (i <- pascal.max to pascal.min by -1)
  println(f"$i%3d: " + pascal.map(p => if (p>=i) "#" else " ").mkString)
```

---

With negative numbers:

```
def plot(a: Seq[Int]) =
  for (i <- a.max to (0 min a.min) by -1; s = i.signum) println {
    f"$i%3d: " + a.map(p => if (p * s >= i * s) "#" else " ").mkString
  }

plot(for (i <- 0 to 75) yield (12 * math.sin(i/12.0)).round.toInt)
```

--
/

```
plot(for (i <- 0 to 75) yield (12 * math.cos(i/12.0)).round.toInt)
```

---

| Extension methods

--

```
implicit class IntOps(val n: Int) extends AnyVal {
  def stars = "*" * n
}

5.stars
```

--
/

```
implicit class StrOps(val s: String) extends AnyVal {
  def isBlank = s.trim.isEmpty
}

"  \t \n ".isBlank
```

---

Reading the contents of a file:

```
io.Source.fromFile("simpsons.txt").mkString
```

--
/

Processing a file line by line:

```
val lines = io.Source.fromFile("simpsons.txt").getLines.toList
```

---

Line numbers:

```
lines.zipWithIndex.foreach {
  case (l, i) => println(f"${i+1}%2d: $l")
}
```

--
/

Selecting a line at random:

```
lines(util.Random.nextInt(lines.size))
```

---

Fetching a file from the web:

```
io.Source.fromURL("https://www.gnu.org/licenses/gpl.txt").take(423).mkString
```

--
/

Reading the news:

```
val news = xml.XML.load("https://news.google.com/?q=scala&output=rss")
```

--
/

We are humans, not robots:

```
news \\ "item" \ "title" map (_.text) mkString "\n"
```

---

| Importing instance members

--

```
{
  import jane._
  s"$name: $gender"
}
```

---

| There is method in my randomness. Plenty, actually.

--

```
import util.Random
for (_ <- 1 to 5) println(Random.nextInt)
```
--

```
for (_ <- 1 to 5) println(Random.nextInt(3))
```
--

```
for (_ <- 1 to 5) println(Random.nextDouble)
```
--

```
for (_ <- 1 to 5) println(Random.nextBoolean)
```
--

```
for (_ <- 1 to 5) println(Random.nextPrintableChar)
```
--

```
for (_ <- 1 to 5) println(Random.nextString(10))
```
--

```
for (_ <- 1 to 5) println(Random.alphanumeric.take(10).mkString)
```
--

```
for (_ <- 1 to 5) println(Random.shuffle(Seq(1, 2, 3, 4)))
```

---

Normally (Gaussian) distributed value with mean 0.0 and std dev 1.0:

```
for (_ <- 1 to 5) println(Random.nextGaussian)
```
--

```
val g = Seq.fill(1000000)((Random.nextGaussian * 10).round.toInt)

plot(for (i <- g.min to g.max) yield (g.count(_ == i) / 2000))
```

---

| A-mazing

```
for (_ <- 1 to 2000) print((9585 + util.Random.nextInt(2)).toChar)
```

--

```
for (_ <- 1 to 2000) print((9620 + util.Random.nextInt(2)).toChar)
```

---

| Colors!

```
import Console.{RED, GREEN, BLUE}

println(s"$RED red $GREEN green $BLUE blue")
```

---

| Preconditions

--

```
case class Person(name: String, age: Int) {
  require(name.trim.nonEmpty, "name cannot be empty")
  require(age >= 0, "age cannot be negative")
  require(age <= 130, "oldest unambiguously documented human was 122")
}
```
--

```
Person(" \t  ", 1)
```
--

```
Person("Bob", -1)
```

---

| Regular expressions

--

Regexes are easy to define in Scala, just add \*.r\s to a string.
Use triple quotes to avoid escaping all backslashes:

```
val date = """(\d\d\d\d)-(\d\d)-(\d\d)""".r
```

--
/

Extracting groups when a regex matches is even cooler:

```
val date(year, month, day) = "2015-08-15"
```

---

Parsing numbers

--

```
val hex = "^0x[0-9a-fA-F]+$".r
val oct = "^0[0-7]+$".r
val dec = "^[0-9]+$".r

def parse(s: String): Int = s match {
  case hex(_*) => Integer.parseInt(s.drop(2), 16)
  case oct(_*) => Integer.parseInt(s.drop(1), 8)
  case dec(_*) => s.toInt
}
```
--

```
val a = parse("0x42")
val b = parse("042")
val c = parse("42")
```

---

| Running system processes

--

```
import scala.sys.process._
"ls".!
```

--
/

Capturing the output:

```
val output = "ls".!!
```

---

| Getting fancy

```
def find(s: String) = "ls" #| s"grep $s" #|| "echo not found" lines

val scala = find(".scala").mkString
val java = find(".java").mkString
```

---

| \gReferences

| github.com/marconilanna/talks


| blog.originate.com


| github.com/marconilanna/REPLesent

--

/

| Thank you!

--

| Questions?
