           F-Bounded Polymorphism
     Recursive Type Signatures in Scala

               Marconi Lanna
                 Originate

Based on original content by Andrew Mohrland
---
Have you ever seen a type signature like this before?

                 trait T[U <: T[U]]
---
Heck, even Java 5 in 2004 had them:

public abstract class Enum<E extends Enum<E>>
---
F-bounded polymorphism
--

Self-referential types
--

Recursive type signatures
--

Recursively bounded quantification
---
"In type theory, bounded quantification (also bounded polymorphism or
constrained genericity) refers to universal or existential quantifiers
which are restricted ("bounded") to range only over the subtypes of a
particular type.

Bounded quantification is an interaction of parametric polymorphism
with subtyping.

We speak of F-bounded quantification if the subtype constraint itself
is parametrized by one of the binders occurring on the left-hand side"

                                                             Wikipedia
---
A powerful object-oriented technique that leverages
the type system to encode constraints on generics
--

Advanced compiler-enforced type semantics over classes and traits
--

Enhanced type-safety
--

Simplify and reduce the number of unit tests
---
What the heck does it do?
---
Why not simply use trait T[U]?
---
Or maybe even just trait T?
---
Learning by example
---
Suppose we have database entities with CRUD methods
---
We could define them like this
---
class Apple {
  def create(): Apple
  def read(id: long): Option[Apple]
  def update(f: Apple => Apple): Apple
  def delete(id: Long): Unit
}

class Orange {
  def create(): Orange
  def read(id: Long): Option[Orange]
  def update(f: Orange => Orange): Orange
  def delete(id: Long): Unit
}
---
The classes look nearly identical
--

New entities would expose the same CRUD methods
---
Let's abstract it into a trait
---
Let's start simple
---
trait T
---
trait Entity {
  def create(): Entity
  def read(id: Long): Option[Entity]
  def update(f: Entity => Entity): Entity
  def delete(id: Long): Unit
}

class Apple extends Entity

class Orange extends Entity
---
Well, this sucks
---
Method signatures do not fully express what we want
--

Cannot ensure that, for instance, calling update on Apple returns an Apple
--

As it is, it can return any Entity
---
Let's try again
---
Adding a type parameter to our Entity trait
---
trait T[U]
---
trait Entity[E] {
  def create(): E
  def read(id: Long): Option[E]
  def update(f: E => E): E
  def delete(id: Long): Unit
}

class Apple extends Entity[Apple]

class Orange extends Entity[Orange]
---
Better
--

But still not good
--

Types do not yet express exactly what we want
---
Do you see the problem?
---
The problem is that Entity can be extend in unintended ways
---
class Orange extends Entity[FlyingSaucer]
---
Entity[E] does not restrict the type of E
--

Anything could be used, without any compiler errors
---
No bueno!
---
We want a big, fat compiler error if we try anything other than

Orange extends Entity[Orange]
---
How to ensure that E matches its class?
---
Type bounds!
---
trait T[U <: T[U]]
---
Let's try again
---
trait Entity[E <: Entity[E]] {
  def create(): E
  def read(id: Long): Option[E]
  def update(f: E => E): E
  def delete(id: Long): Unit
}

class Apple extends Entity[Apple]

class Orange extends Entity[Orange]
---
Better
---
We have now constrained E to be a subtype of Entity
--

No more Orange extends FlyingSaucer
---
But there is still one last problem...
---
Can you guess what it is?
---
class Apple extends Entity[Apple]

class Orange extends Entity[Apple]
---
It is not ensured that E matches its own type,
only that it is a subclass of Entity
--

The trait is still open for abuse
---
Getting there...
---
We need a way to ensure that Orange extends Entity[Orange]
---
Self types
---
Self types!
---
trait Entity[E <: Entity[E]] { self: E =>
  def create(): E
  def read(id: Long): Option[E]
  def update(f: E => E): E
  def delete(id: Long): Unit
}
---
The self type (self: E =>) ensures that any
class that extends Entity is of type E
---
Now, code like

class Orange extends Entity[Apple]

will finally be rejected by the compiler
---
And we can rest confident that our definition of Entity
ensures that any subtype of Entity[E] is in fact an E
--

Semantics we desire
--

Compiler rejects any code in violation
---
References

github.com/marconilanna/talks

blog.originate.com

blog.originate.com/blog/2014/02/27/types-inside-types-in-scala/
---
Thank you!
--

Questions?
